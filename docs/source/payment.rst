The ``Payment`` class
=====================

.. class:: Payment

	An instance of the ``Payment`` class represents a single credit transfer request, which may include one or more transactions.

	Its attributes can be specified as keyword arguments to the constructor, or they can be set at any time before adding transactions.

	.. data:: debtor

		The ``IdHolder`` instance of the holder of the debted account.

	.. data:: account

		The IBAN of the debted bank account.

	.. data:: initiator

		*(optional)* The ``IdHolder`` instance of the entity who is requesting the credit transfer. If it is missing, it is assumed to be the ``debtor``.

	.. data:: envelope

		*(optional)* Whether the request should be wrapped in a ``CbiBdyPaymentRequest`` XML tag. The default is ``False``.

	.. data:: req_id

		*(optional)* A unique ID for the credit transfer. If it is missing, it is autogenerated.

	.. data:: batch

		*(optional)* A boolean value indicating whether batch booking is desired for this request, i.e. if it is desired that a single cumulative line appears on the bank statement for the whole request. If it is set to ``False``, the bank is requested to expose the individual transactions on the bank statement.

		If it is missing, this depends on the agreements between the bank and the customer.

	.. data:: high_priority

		*(optional)* A boolean value indicating whether high priority (urgency) is desired for the whole request.  The interpretation depends on the agreements between the bank and the customer.

	.. data:: execution_date

		*(optional)* The requested execution date for the transfer. If it is missing, the default is the same day on which the request is generated.

	.. data:: abi

		*(optional)* The ABI code of the bank acting as the debtor's agent. If it is missing, it is taken from the debtor's IBAN, but in this case it has to be an Italian IBAN.

	.. data:: ultimate_debtor

		*(optional)* The ``IdHolder`` instance of the entity who is the ultimate debtor (not necessarily the holder of the debted account) for the request.

	.. data:: charges_account

		*(optional)* The IBAN of the account on which the transfer charges should be debted.

Adding transactions
-------------------

Individual transactions are specified by invoking the ``add_transaction`` method of the ``Payment`` instance.

.. method:: Payment.add_transaction(**kwargs)

    (All arguments are keyword arguments.)

    .. data:: creditor

    	The ``IdHolder`` instance of the holder of the credited account.

    .. data:: account

    	The IBAN of the credited account.

    .. data:: amount

    	The credited amount, in Euros. It can be an integer, a float, a string or a ``Decimal`` instance.

    .. data:: bic

    	*(optional)* The BIC code of the bank of the credited account. This is only needed if the IBAN has a foreign country code (i.e. not starting with ``IT`` or ``SM``). Otherwise it is ignored.

    .. data:: rmtinfo

    	*(optional)* The remittance information *(causale)*.  Only needed if ``docs`` is missing.

    .. data:: ultimate_debtor

    	*(optional)*  The ``IdHolder`` instance of the ultimate debtor for this transaction.  It is only allowed if the ultimate debtor is not specified for the request.

    .. data:: ultimate_creditor

    	*(optional)* The ``IdHolder`` instance of the ultimate creditor for this transaction.

    .. data:: category

    	*(optional)* The category code for the transaction. It must be one of the ISO 20022 standard codes of type ``ExternalCategoryPurpose1Code``.

    	If it is not specified, the default ``SUPP`` is used, defined as "Transaction is related to a payment to a supplier".  Other frequently used codes are:

    	 * ``SALA``, for the payment of salaries
    	 * ``TAXS``, for the payment of taxes

    	The complete list can be found on the `External Code Sets <http://www.iso20022.org/external_code_list.page>`_ page of the ISO 20022 website.

    .. data:: purpose

    	*(optional)* The purpose code for the transaction. It must be one of the ISO 20022 standard codes of type ``ExternalPurpose1Code``.

    	If it is not specified, the default ``SUPP`` is used. Other frequently used codes are:

    	 * ``SALA``, for the payment of salaries
    	 * ``ADVA``, for the payment of advance fees
    	 * ``TAXS``, for the payment of taxes

    	The complete list can be found on the `External Code Sets <http://www.iso20022.org/external_code_list.page>`_ page of the ISO 20022 website.

    .. data:: docs

    	*(optional)* A list or tuple of ``Document`` instances (or one of its subclasses). Their information is formatted according to the `EACT Standard for Unstructured Remittance Information <http://www.europeanpaymentscouncil.eu/index.cfm/sepa-credit-transfer/eact-standard-for-unstructured-remittance-information/>`_.

    .. data:: eeid

        *(optional)* The end-to-end ID that uniquely identifies the transaction in the request. If missing, it is autogenerated.

Obtaining the XML output
------------------------

.. method:: Payment.text()

	Return a string containing the XML rendering of the credit transfer request.

.. method:: Payment.xml()

	Return ``lxml``'s XML structure for the credit transfer request.